<article class="prose mx-auto">
  <h1>Async</h1>
  <p class="lead">As of version 8.7.0 the New Relic Ruby agent instruments Ruby Threads. &#127881;</p>

  <h3>Configuration</h3>

  <p>If you'd like all of your threads instrumented automatically you'll need to update your agent configuration.</p>

  <pre><code>
  # newrelic.yml file
    instrumentation:
      thread:
        tracing: true

    # Environment variable
    NEW_RELIC_INSTRUMENTATION_THREAD_TRACING=true
  </code></pre>

  <hr>

  <h3>Custom Instrumentation</h3>

  <p>If you prefer to have more control over which Threads get instrumented, try using the <code>NewRelic::TracedThread</code> class instead. It behaves just like <code>Thread.new</code>, but with New Relic instrumentation wrapped around the code executed in the block.</p>

  <pre><code>NewRelic::TracedThread.new { execute_some_code }</code></pre>

  <p>Threads, as well as the instrumented operations performed within them, such as external requests, will then be viewable in the APM UI.</p>

  <hr>

  <h3>View Thread Spans in the NR1 UI</h3>

  <p>When this page loaded, we made a few external requests within threads.</p>

  <pre><code>
  def index
    threads = []
    paths = [
      'https://rubygems.org',
      'https://rubyonrails.org',
      'https://github.com'
    ]

    paths.each do |path|
      threads << Thread.new { Net::HTTP.get(URI.parse(path)) }
    end

    threads.each(&:join)
  end
  </code></pre>


  <p>We can take a look at the spans generated by this request by <a href="https://onenr.io/0EjOeWy3Aw6" target="_blank">clicking here.</a></p>

  <hr>

  <h3>APM Homepage Click Path</h3>
  <ul>
    <li>Visit Distributed Tracing</li>
    <li>Select the <code>Controller/async/index</code> trace group</li>
    <li>Select a trace</li>
    <li>Click on the dropdown with the total number of spans</li>
    <li>Click "Display in-process spans for this service"</li>
    <li>Scroll to the bottom and look for "Thread"</li>
  </ul>

  <hr>
  <%= link_to "Return to Demos", root_path %>

</article>
